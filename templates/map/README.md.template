# Background
This README and the project files were autogenerated using [a script](https://github.com/georgeslabreche/xyzRGB-pointcloud-rasterizer) that automates the process of creating a [MARS](https://github.com/rock-simulation/mars) model environmnet from an xyzRGB pointcloud ASCII file.

# Environment
The minimum and maximum bounding box coordinate values are specified in the *bbox.json* file.

## Coordinates
The poitncloud's center coordinate is:
- X: {COORDINATE_CENTER_X}
- Y: {COORDINATE_CENTER_Y}
- Z: {COORDINATE_CENTER_Z}

## Bounding Box
The pointcloud's bounding box dimension:
- X: {BOUNDING_BOX_X}
- Y: {BOUNDING_BOX_Y}
- Z: {BOUNDING_BOX_Z}

## Heightmap Configuration
The pointcloud's bounding box results in the following configurations for *heightmap.yml*:

### nodelist
- extend: {x: {WIDTH}, y: {HEIGHT}, z: {SCALE}}
- t\_width: {WIDTH}
- t\_height: {HEIGHT}
- t\_scale: {SCALE}

### materiallist
- scaleZ: {SCALE}
- tex\_scale: {TEX_SCALE}

The tex\_scale value corresponds to 1/{WIDTH}.

#### Shaders
Fragment and vertex shaders are applied through references to the **fragment\_shader.yml** and **vertex\_shader.yml** files.
Both shaders require the center coordinate of the terrain as input, that is t\_width/2 and t\_height/2. The vertex shader is able to calculate this from the terrain\_map node output. However, this does not seem possible for the fragment shader. As a workaround, the terrain size is hardcoded in the **fragment\_shader.yml** file under *defaultLayout > components > configuration > nodes > name: terrain_size*.

Consult documentation on the [Bagel project](https://github.com/dfki-ric/bagel_wiki/wiki) for more information on shaders and how to create/edit them via a graph editor.
